<?php

/**
 *  Implementation of our own geosearch_hook_info
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function openlayers_geosearch_trigger_info() {
  return array(
    'geosearch' => array(
      'geosearch_geosearch' => array(
        'label' => t('When we ask to geosearch a location'),
      ),
    ),
  );
}

/**
 * Implements hook_geosearch().
 */
function openlayers_geosearch_geosearch($query) {
  $result = array();
  $handlers = geocoder_handler_info();
  $options = variable_get('openlayers_geosearch_geocoders', array());
  foreach ($options as $key => $value) {
    if ($value) {
      $result[$key] = geocoder($key, $query);
    }
  }
  return $result;
}

/**
 * Add required js and css files.
 */
// function openlayers_geosearch_load($nodes) {
function openlayers_geosearch_load_required_files() {
  // ERROR: return statement not found in hook_load
  // TODO: Name the variable $xx_missing_xx which was missing in the old function signature.
  static $loaded = FALSE;

  if (!$loaded) {
    drupal_add_library('system', 'ui.tabs');
    $path = drupal_get_path('module', 'openlayers_geosearch');
    drupal_add_css($path . '/css/openlayers_geosearch.css');

    $loaded = TRUE;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_geosearch_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_maps':
        return array('version' => 1);
      case 'openlayers_layers':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_openlayers_maps().
 */
function openlayers_geosearch_openlayers_maps() {
  module_load_include('inc', 'openlayers_geosearch', 'includes/openlayers_geosearch_maps');
  return _openlayers_geosearch_openlayers_maps();
}

/**
 * Implements hook_openlayers_layers().
 */
function openlayers_geosearch_openlayers_layers() {
  module_load_include('inc', 'openlayers_geosearch', 'includes/openlayers_geosearch_layers');
  return _openlayers_geosearch_openlayers_layers();
}

/**
 * Implements hook_menu().
 */
function openlayers_geosearch_menu() {
  $items = array();
  $items['admin/structure/openlayers/geosearch'] = array(
    'title' => 'Geosearch',
    'description' => 'Manage Geosearch Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_geosearch_settings_page'),
    'access arguments' => array('administer openlayers'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 20,
  );
  $items['admin/structure/openlayers/geosearch/form'] = array(
    'title' => 'Geosearch',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  $items['openlayers/geosearch/response_js'] = array(
    'page callback' => 'openlayers_geosearch_get_response_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['openlayers/geosearch/searchpage'] = array(
    'page callback' => 'openlayers_geosearch_searchpage',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Settings page of our own module
 */
function openlayers_geosearch_settings_page($form, &$form_state) {
  $form['openlayers_geosearch_map'] = array(
    '#type' => 'select',
    '#title' => t('Map'),
    '#description' => t('This is map that will be used to render the view.'),
    '#options' => openlayers_map_options(),
    '#default_value' => variable_get('openlayers_geosearch_map', 'default'),
  );
  $form['openlayers_geosearch_test'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Test Page'),
    '#description' => t('Enables the !link.', array('!link' => l('test page', 'openlayers/geosearch/searchpage'))),
    '#default_value' => variable_get('openlayers_geosearch_test', 1),
  );

  $options = array();
  $handlers = geocoder_handler_info();
  foreach ($handlers as $handler) {
    if (isset($handler['terms_of_service'])) {
      $options[$handler['name']] = $handler['name'];
    }
  }

  $form['openlayers_geosearch_geocoders'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Geocoders'),
    '#description' => t('Enables the !link.', array('!link' => l('test page', 'openlayers/geosearch/searchpage'))),
    '#options' => $options,
    '#default_value' => variable_get('openlayers_geosearch_geocoders', array()),
  );

  // Make a system setting form and return
  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function openlayers_geosearch_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_geosearch_result_html' => array(
      'variables' => array(
        'provider' => NULL,
        'locations' => NULL,
      ),
      'template' => 'openlayers-geosearch-result-html',
      'path' => drupal_get_path('module', 'openlayers_geosearch') . '/theme',
    ),
  );
}

/**
 * Get response from all hooks and render as HTML
 * This function is called from our AHA form
 */
function openlayers_geosearch_get_response_js($form, $form_state) {
  $query = check_plain($_POST['openlayers_geosearch_query_block']);
  $result = '';
  $locations = array();
  if ($response = openlayers_geosearch_geosearch($query)) {
    // Yes, one day we will use a nice .tpl file for this

    // Note that openlayersgeosearchresults is the div that we are replacing using the
    // FormAPI ajax settings in the search form
    // This is done pretty rigourously, so we need to insert the #id again
    $result .= '<div id="openlayersgeosearchresults">/';
    $result .= '<div id="openlayersgeosearchtabs" class="ui-tabs">';

    $result .= '<ul class="ui-tabs-nav">';
    $count = 0;
    foreach ($response as $provider => $results) {
    	if (isset($results->data['geocoder_alternatives'])) {
    		$sum = count($results->data['geocoder_alternatives']) + 1;
    		if($sum == 0) {
    			$count = 0;
    		}else {
    			$count += $sum;
    		}
    	}
    	$result .= '<li><a href="#openlayersgeosearchtabs-' . $provider . '">' . $provider . ' (' . $count . ')</a></li>';
    	$count = 0;
    }
    $result .= '</ul>';
    foreach ($response as $provider => $results) {
      $result .= '<div id="openlayersgeosearchtabs-' . $provider . '" class="ui-tabs-panel">';
      $locations = array();
      if (isset($results->data['geocoder_alternatives'])) {
        $locations = $results->data['geocoder_alternatives'];
        unset($results->data['geocoder_alternatives']);
      }
      array_unshift($locations, $results);
      if (!empty($locations[0])) {
        $result .= theme('openlayers_geosearch_result_html', array('provider' => $provider, 'locations' => $locations));
        unset($locations);
      }
      else {
        $result .= "<div class='ui-tabs-nav'>" . $provider . t(" returned no results.") . "</div>";
      }
      $result .= '</div>';
    }
    $result .= '</div>';
    $result .= '</div>';
  }
  else {
    $result = t('No location found.') . implode(" ,", $_POST);
  }

  // Return plain HTML
  return $result;

}

/**
 * Implements hook_block_info().
 */
function openlayers_geosearch_block_info() {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  $blocks['search-form']['info'] = t('Geosearch Search Box');
  $blocks['search-results']['info'] = t('Geosearch Search Results');
  $blocks['search-map']['info'] = t('Geosearch Search Map');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function openlayers_geosearch_block_configure($delta) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  switch ($delta) {
    case 'search-form':
      // for now we wont store a provider on the block but only on the
      // general page
      break;
    case 'search-results':
      return NULL;
      break;
    case 'search-map':
      $form['openlayers_geosearch_map'] = array(
        '#type' => 'select',
        '#title' => t('Map'),
        '#description' => t('This is map that will be used to render the view.'),
        '#options' => openlayers_map_options(),
        '#default_value' => variable_get('openlayers_geosearch_map', 'default'),
      );
      return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function openlayers_geosearch_block_save($delta, $edit) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  switch ($delta) {
    case 'search-form':
      break;
    case 'search-results':
      break;
    case 'search-map':
      variable_set('openlayers_geosearch_map', $edit['openlayers_geosearch_map']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function openlayers_geosearch_block_view($delta) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  $block = array();
  switch ($delta) {
    case 'search-form':
      $block['content'] = drupal_get_form('openlayers_geosearch_searchform');
      break;
    case 'search-results':
      $block['content'] = '<div id="openlayersgeosearchresults">Here will the results be</div>';
      break;
    case 'search-map':
      $map = openlayers_map_load(variable_get('openlayers_geosearch_map', 'default'));
      $map->data['id'] = 'openlayers_geosearch_map_id';
      $rendered = openlayers_render_map($map->data, variable_get('openlayers_geosearch_map', 'default'));
      $block['content'] = $rendered;
  }
  return $block;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function openlayers_geosearch_searchform($form) {
  // Load required js and css.
  openlayers_geosearch_load_required_files();

  drupal_add_js(drupal_get_path('module', 'openlayers_geosearch') . '/js/openlayers_geosearch.js');

  $form['openlayers_geosearch_query_block'] = array(
    '#title' => t('Search address'),
    '#type' => 'textfield',
  );
  $form['openlayers_geosearch_button'] = array(
    '#type' => 'button',
    '#value' => t('Search'),
    '#name' => 'search',
    '#ajax' => array(
      'event' => 'click',
      'callback' => 'openlayers_geosearch_get_response_js',
      'wrapper' => 'openlayersgeosearchresults',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Searching...'),
      ),
    ),
  );
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function openlayers_geosearch_searchpage() {
  if (variable_get('openlayers_geosearch_test', TRUE)) {
    // Load required js and css.
    openlayers_geosearch_load_required_files();

    $mapblock = module_invoke('openlayers_geosearch', 'block_view', 'search-map');
    $searchblock = module_invoke('openlayers_geosearch', 'block_view', 'search-form');
    $searchblock['content'] = drupal_render($searchblock);
    $resultblock = module_invoke('openlayers_geosearch', 'block_view', 'search-results');
    $output = $mapblock['content'] . $searchblock['content'] . $resultblock['content'];
    return $output;
  }
  else {
    drupal_access_denied();
  }
}
